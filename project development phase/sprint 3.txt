         Importing the Libraries


  In [4]: import numpy as np
          import pandas as pd
          import matplotlib.pyplot as plt
          import seaborn as sns

        Loading the Dataset

  In [5]: df=pd.read_csv('Dataset/car_performance.csv')

        Data Analysis

  In [6]: df.head(10)

  Out [6]: mpg    cylinders	displacement	horsepower	weight	acceleration	model year   origin	car name
        
               0    18.o       8          307.0           130            3504     12.0           70             1     chevrolet chevelle malibu

               1    15.0       8          350.0           165            3693     11.5           70             1     buick skylark 320

               2    18.0       8          318.0           150            3436     11.0           70             1     plymouth satelite
    
               3    16.0       8          304.0           150            3433     12.0           70             1     amc rebel sst

               4    17.0       8          302.0           140            3449     10.5           70             1     ford torino
 

  
  In [7]: df.shape

  Out[7]: (398, 9)

  In [8]: df.columns

  Out[8]: Index(['mpg', 'cylinders', 'displacement', 'horsepower', 'weight',
                'acceleration', 'model year', 'origin', 'car name'],
                dtype='object')
  
  In [9]: df.info()

          RangeIndex: 398 entries, 0 to 397
          Data columns (total 9 columns):
          #   Column        Non-Null Count  Dtype  
          ---  ------        --------------  -----  
          0   mpg           398 non-null    float64
          1   cylinders     398 non-null    int64  
          2   displacement  398 non-null    float64
          3   horsepower    398 non-null    int64  
          4   weight        398 non-null    int64  
          5   acceleration  398 non-null    float64
          6   model year    398 non-null    int64  
          7   origin        398 non-null    int64  
          8   car name      398 non-null    object 
          dtypes: float64(3), int64(5), object(1)
          memory usage: 28.1+ KB

  In [10]: df.nunique()

  Out[10]: mpg             129
           cylinders         5
           displacement     82
           horsepower       93
           weight          351
           acceleration     95
           model year       13
           origin            3
           car name        305
           dtype: int64

  In [11]: df.origin.unique()

  Out [11]: array([1, 3, 2])

        Handiling the Missing Values

  In [12]: df.isna().sum()

  Out [12]: mpg             0
            cylinders       0
            displacement    0
            horsepower      0
            weight          0
            acceleration    0
            model year      0
            origin          0
            car name        0
            dtype: int64

  In [13]: # There is no Null Value in the data set

           Lable encoding

  In [14]: # There is no Categorial value other than the car name (car name            is not used for the performance predecting so we can drop the car            name column), so we n 
   
         Droping the car name column

   In [15]: df=df.iloc[:,:-1]

   In [16]: df.head()

   Out [16]: mpg    cylinders	displacement	horsepower	weight	acceleration	model year   origin	car name
        
               0    18.o       8          307.0           130            3504     12.0           70             1     chevrolet chevelle malibu

               1    15.0       8          350.0           165            3693     11.5           70             1     buick skylark 320

               2    18.0       8          318.0           150            3436     11.0           70             1     plymouth satelite
    
               3    16.0       8          304.0           150            3433     12.0           70             1     amc rebel sst

               4    17.0       8          302.0           140            3449     10.5           70             1     ford torino
 
         
     splitting the dataset into dependent and independent Variable


  In [17]: x=df.iloc[:,1:]

  In [18]: y=df.iloc[:,0]

  In [19]: x.head()

  Out [19]:   mpg    cylinders	displacement	horsepower	weight	acceleration	model year   origin	car name
        
               0    18.o       8          307.0           130            3504     12.0           70             1     chevrolet chevelle malibu

               1    15.0       8          350.0           165            3693     11.5           70             1     buick skylark 320

               2    18.0       8          318.0           150            3436     11.0           70             1     plymouth satelite
    
               3    16.0       8          304.0           150            3433     12.0           70             1     amc rebel sst

               4    17.0       8          302.0           140            3449     10.5           70             1     ford torino
 

  In [20]: y.head()

  Out [20]: 0    18.0
            1    15.0
            2    18.0
            3    16.0
            4    17.0
            Name: mpg, dtype: float64

           Splitting the dataset into train and test


  In [21]: from sklearn.model_selection import train_test_split
           x_train,x_test, y_train, y_test = train_test_split           (x,y,test_size=0.2)

  In [22]: x_train.shape,x_test.shape,y_train.shape,y_test.shape

  Out [22]: ((318, 7), (80, 7), (318,), (80,))

     Normalizing the values

  In [23]: from sklearn.preprocessing import StandardScaler
           sd = StandardScaler()
           x_train=sd.fit_transform(x_train)
           x_test=sd.fit_transform(x_test)

  In [24]: x_train

  Out [24]: array([[ 0.31361269,  0.36208368, -0.36028555, ...,  0.5196298 ,
                    -0.29742399, -0.69753728],
                   [-0.86661022, -1.03773964, -1.00481077, ...,  1.31198595,
                     1.06541218,  1.80886787],
                   [ 1.49383561,  1.96188176,  2.21781535, ..., -1.20914727,
                     0.24771047, -0.69753728],
                   ...,
                   [-0.86661022, -0.9901266 , -1.44308793, ...,  2.1403583 ,
                     0.52027771,  0.55566529],
                   [ 1.49383561,  1.49527399,  1.26391802, ..., -0.74093682,
                    -1.38769293, -0.69753728],
                   [-0.86661022, -0.6092223 , -0.05091344, ...,  0.05141934,
                     -0.02485676,  0.55566529]])

        Model Building

        Implementing the RandomForestRegression Algorithm

   In [126..  from sklearn.ensemble import RandomForestRegressor

   In [127..  rf = RandomForestRegressor(n_estimators=30,random_state=0)

   In [128..  rf.fit(x_train,y_train)

   Out [128..  RandomForestRegressor(n_estimators=30, random_state=0)
               In a Jupyter environment, please rerun this cell to show the                HTML representation or trust the notebook.
               On GitHub, the HTML representation is unable to render,                please try loading this page with nbviewer.org.

    
















